---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-reader
  namespace: identity
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dapr-secret-reader
  namespace: identity
subjects:
- kind: ServiceAccount
  name: default
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dashboard
  namespace: dapr-system
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: dapr.k8s.local
      http:
        paths:
          - backend:
              service:
                name: dapr-dashboard
                port:
                  number: 8080
            path: /
            pathType: Prefix
---
apiVersion: dapr.io/v1alpha1
kind: Configuration
metadata:
  name: vonage
  namespace: identity
spec:
  metric:
    enabled: true
  mtls:
    enabled: true
    workloadCertTTL: 24h
    allowedClockSkew: 15m
  tracing:
    samplingRate: "1"
    zipkin:
      endpointAddress: "http://zipkin.default.svc.cluster.local:9411/api/v2/spans"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin
  namespace: identity
  labels:
    app: zipkin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      labels:
        app: zipkin
    spec:
      containers:
      - name: zipkin
        image: openzipkin/zipkin
        ports:
        - containerPort: 9411
---
kind: Service
apiVersion: v1
metadata:
  name: zipkin
  namespace: identity
  labels:
    app: zipkin
spec:
  selector:
    app: zipkin
  ports:
  - protocol: TCP
    port: 9411
    targetPort: 9411
  type: ClusterIP         
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: zipkin
  namespace: identity
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: zipkin.k8s.local
      http:
        paths:
          - backend:
              service:
                name: zipkin
                port:
                  number: 9411
            path: /
            pathType: Prefix
---
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: audit
  namespace: identity
spec:
  type: pubsub.redis
  version: v1
  metadata:
  # These settings will work out of the box if you use `helm install
  # bitnami/redis`.  If you have your own setup, replace
  # `redis-master:6379` with your own Redis master address, and the
  # Redis password with your own Secret's name. For more information,
  # see https://docs.dapr.io/operations/components/component-secrets .
  - name: redisHost
    value: redis-master.default:6379
  - name: redisPassword
    secretKeyRef:
      name: redis
      key: redis-password
auth:
  secretStore: kubernetes
---
apiVersion: dapr.io/v1alpha1
kind: Component
metadata:
  name: statestore
  namespace: identity
spec:
  type: state.redis
  version: v1
  metadata:
  # These settings will work out of the box if you use `helm install
  # bitnami/redis`.  If you have your own setup, replace
  # `redis-master:6379` with your own Redis master address, and the
  # Redis password with your own Secret's name. For more information,
  # see https://docs.dapr.io/operations/components/component-secrets .
  - name: redisHost
    value: redis-master.default:6379
  - name: redisPassword
    secretKeyRef:
      name: redis
      key: redis-password
auth:
  secretStore: kubernetes
---
# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redisinsights
  name: redisinsights
  namespace: identity
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: redisinsights
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: redisinsights
    spec:
      containers:
      - image: redislabs/redisinsight
        imagePullPolicy: Always
        name: redisinsight
        ports:
        - containerPort: 8001
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata: 
  labels:
    app: redisinsights
  name: redisinsights 
  namespace: identity
spec:
  ports:
  - port: 8001
    protocol: TCP
    targetPort: 8001
  selector:
    app: redisinsights 
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: redisinsights 
  namespace: identity
spec:
  rules:
  - host: redisinsights.k8s.local
    http:
      paths:
      - backend:
          service:
            name: redisinsights
            port:
              number: 8001
        path: /
        pathType: Prefix 
